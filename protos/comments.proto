syntax = "proto3";

option go_package = "/comment";

package forum;

// Comment message definition
message Comment {
    string id = 1; // UUID
    string post_id = 2; // UUID
    string user_id = 3; // UUID
    string body = 4;
    string created_at = 5;
    string updated_at = 6;
    string deleted_at = 7;
}

// Request for creating a new comment
message CreateCommentRequest {
    string post_id = 1;
    string user_id = 2;
    string body = 3;
}

// Response after creating a new comment
message CreateCommentResponse {
    Comment comment = 1;
}

// Request for retrieving a comment by ID
message GetCommentRequest {
    string id = 1;
}

// Response after retrieving a comment by ID
message GetCommentResponse {
    Comment comment = 1;
}

// Request for updating an existing comment
message UpdateCommentRequest {
    string id = 1;
    string body = 2;
}

// Response after updating a comment
message UpdateCommentResponse {
    Comment comment = 1;
}

// Request for deleting a comment by ID
message DeleteCommentRequest {
    string id = 1;
}

// Response after deleting a comment
message DeleteCommentResponse {
    string message = 1;
}

// Request for getting all comments
message GetAllCommentsRequest {
    // Optional filters
    string post_id = 1;
    string user_id = 2;
    
    // Pagination
    int32 page = 3;
    int32 limit = 4;
}

// Response containing a list of comments
message GetAllCommentsResponse {
    repeated Comment comments = 1;
}

service CommentService {
    // Comment CRUD
    rpc CreateComment (CreateCommentRequest) returns (CreateCommentResponse);
    rpc GetComment (GetCommentRequest) returns (GetCommentResponse);
    rpc UpdateComment (UpdateCommentRequest) returns (UpdateCommentResponse);
    rpc DeleteComment (DeleteCommentRequest) returns (DeleteCommentResponse);

    // Comment GetAll
    rpc GetAllComments (GetAllCommentsRequest) returns (GetAllCommentsResponse);
}